/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.avos.recommendation.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RecommenderRpc {

  public interface Iface {

    public CommonResponse recommend(String api, CommonRequest request, Map<String,String> argvs) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void recommend(String api, CommonRequest request, Map<String,String> argvs, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.recommend_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public CommonResponse recommend(String api, CommonRequest request, Map<String,String> argvs) throws org.apache.thrift.TException
    {
      send_recommend(api, request, argvs);
      return recv_recommend();
    }

    public void send_recommend(String api, CommonRequest request, Map<String,String> argvs) throws org.apache.thrift.TException
    {
      recommend_args args = new recommend_args();
      args.setApi(api);
      args.setRequest(request);
      args.setArgvs(argvs);
      sendBase("recommend", args);
    }

    public CommonResponse recv_recommend() throws org.apache.thrift.TException
    {
      recommend_result result = new recommend_result();
      receiveBase(result, "recommend");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "recommend failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void recommend(String api, CommonRequest request, Map<String,String> argvs, org.apache.thrift.async.AsyncMethodCallback<recommend_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      recommend_call method_call = new recommend_call(api, request, argvs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class recommend_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String api;
      private CommonRequest request;
      private Map<String,String> argvs;
      public recommend_call(String api, CommonRequest request, Map<String,String> argvs, org.apache.thrift.async.AsyncMethodCallback<recommend_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.api = api;
        this.request = request;
        this.argvs = argvs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("recommend", org.apache.thrift.protocol.TMessageType.CALL, 0));
        recommend_args args = new recommend_args();
        args.setApi(api);
        args.setRequest(request);
        args.setArgvs(argvs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CommonResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_recommend();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("recommend", new recommend());
      return processMap;
    }

    private static class recommend<I extends Iface> extends org.apache.thrift.ProcessFunction<I, recommend_args> {
      public recommend() {
        super("recommend");
      }

      protected recommend_args getEmptyArgsInstance() {
        return new recommend_args();
      }

      protected recommend_result getResult(I iface, recommend_args args) throws org.apache.thrift.TException {
        recommend_result result = new recommend_result();
        result.success = iface.recommend(args.api, args.request, args.argvs);
        return result;
      }
    }

  }

  public static class recommend_args implements org.apache.thrift.TBase<recommend_args, recommend_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recommend_args");

    private static final org.apache.thrift.protocol.TField API_FIELD_DESC = new org.apache.thrift.protocol.TField("api", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ARGVS_FIELD_DESC = new org.apache.thrift.protocol.TField("argvs", org.apache.thrift.protocol.TType.MAP, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new recommend_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new recommend_argsTupleSchemeFactory());
    }

    public String api; // required
    public CommonRequest request; // required
    public Map<String,String> argvs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      API((short)1, "api"),
      REQUEST((short)2, "request"),
      ARGVS((short)3, "argvs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // API
            return API;
          case 2: // REQUEST
            return REQUEST;
          case 3: // ARGVS
            return ARGVS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.API, new org.apache.thrift.meta_data.FieldMetaData("api", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommonRequest.class)));
      tmpMap.put(_Fields.ARGVS, new org.apache.thrift.meta_data.FieldMetaData("argvs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recommend_args.class, metaDataMap);
    }

    public recommend_args() {
    }

    public recommend_args(
      String api,
      CommonRequest request,
      Map<String,String> argvs)
    {
      this();
      this.api = api;
      this.request = request;
      this.argvs = argvs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recommend_args(recommend_args other) {
      if (other.isSetApi()) {
        this.api = other.api;
      }
      if (other.isSetRequest()) {
        this.request = new CommonRequest(other.request);
      }
      if (other.isSetArgvs()) {
        Map<String,String> __this__argvs = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.argvs.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__argvs_copy_key = other_element_key;

          String __this__argvs_copy_value = other_element_value;

          __this__argvs.put(__this__argvs_copy_key, __this__argvs_copy_value);
        }
        this.argvs = __this__argvs;
      }
    }

    public recommend_args deepCopy() {
      return new recommend_args(this);
    }

    @Override
    public void clear() {
      this.api = null;
      this.request = null;
      this.argvs = null;
    }

    public String getApi() {
      return this.api;
    }

    public recommend_args setApi(String api) {
      this.api = api;
      return this;
    }

    public void unsetApi() {
      this.api = null;
    }

    /** Returns true if field api is set (has been assigned a value) and false otherwise */
    public boolean isSetApi() {
      return this.api != null;
    }

    public void setApiIsSet(boolean value) {
      if (!value) {
        this.api = null;
      }
    }

    public CommonRequest getRequest() {
      return this.request;
    }

    public recommend_args setRequest(CommonRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public int getArgvsSize() {
      return (this.argvs == null) ? 0 : this.argvs.size();
    }

    public void putToArgvs(String key, String val) {
      if (this.argvs == null) {
        this.argvs = new HashMap<String,String>();
      }
      this.argvs.put(key, val);
    }

    public Map<String,String> getArgvs() {
      return this.argvs;
    }

    public recommend_args setArgvs(Map<String,String> argvs) {
      this.argvs = argvs;
      return this;
    }

    public void unsetArgvs() {
      this.argvs = null;
    }

    /** Returns true if field argvs is set (has been assigned a value) and false otherwise */
    public boolean isSetArgvs() {
      return this.argvs != null;
    }

    public void setArgvsIsSet(boolean value) {
      if (!value) {
        this.argvs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case API:
        if (value == null) {
          unsetApi();
        } else {
          setApi((String)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((CommonRequest)value);
        }
        break;

      case ARGVS:
        if (value == null) {
          unsetArgvs();
        } else {
          setArgvs((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case API:
        return getApi();

      case REQUEST:
        return getRequest();

      case ARGVS:
        return getArgvs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case API:
        return isSetApi();
      case REQUEST:
        return isSetRequest();
      case ARGVS:
        return isSetArgvs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recommend_args)
        return this.equals((recommend_args)that);
      return false;
    }

    public boolean equals(recommend_args that) {
      if (that == null)
        return false;

      boolean this_present_api = true && this.isSetApi();
      boolean that_present_api = true && that.isSetApi();
      if (this_present_api || that_present_api) {
        if (!(this_present_api && that_present_api))
          return false;
        if (!this.api.equals(that.api))
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_argvs = true && this.isSetArgvs();
      boolean that_present_argvs = true && that.isSetArgvs();
      if (this_present_argvs || that_present_argvs) {
        if (!(this_present_argvs && that_present_argvs))
          return false;
        if (!this.argvs.equals(that.argvs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(recommend_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      recommend_args typedOther = (recommend_args)other;

      lastComparison = Boolean.valueOf(isSetApi()).compareTo(typedOther.isSetApi());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApi()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.api, typedOther.api);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, typedOther.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArgvs()).compareTo(typedOther.isSetArgvs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArgvs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argvs, typedOther.argvs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recommend_args(");
      boolean first = true;

      sb.append("api:");
      if (this.api == null) {
        sb.append("null");
      } else {
        sb.append(this.api);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("argvs:");
      if (this.argvs == null) {
        sb.append("null");
      } else {
        sb.append(this.argvs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recommend_argsStandardSchemeFactory implements SchemeFactory {
      public recommend_argsStandardScheme getScheme() {
        return new recommend_argsStandardScheme();
      }
    }

    private static class recommend_argsStandardScheme extends StandardScheme<recommend_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recommend_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // API
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.api = iprot.readString();
                struct.setApiIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new CommonRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ARGVS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
                  struct.argvs = new HashMap<String,String>(2*_map18.size);
                  for (int _i19 = 0; _i19 < _map18.size; ++_i19)
                  {
                    String _key20; // required
                    String _val21; // required
                    _key20 = iprot.readString();
                    _val21 = iprot.readString();
                    struct.argvs.put(_key20, _val21);
                  }
                  iprot.readMapEnd();
                }
                struct.setArgvsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recommend_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.api != null) {
          oprot.writeFieldBegin(API_FIELD_DESC);
          oprot.writeString(struct.api);
          oprot.writeFieldEnd();
        }
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.argvs != null) {
          oprot.writeFieldBegin(ARGVS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.argvs.size()));
            for (Map.Entry<String, String> _iter22 : struct.argvs.entrySet())
            {
              oprot.writeString(_iter22.getKey());
              oprot.writeString(_iter22.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recommend_argsTupleSchemeFactory implements SchemeFactory {
      public recommend_argsTupleScheme getScheme() {
        return new recommend_argsTupleScheme();
      }
    }

    private static class recommend_argsTupleScheme extends TupleScheme<recommend_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recommend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApi()) {
          optionals.set(0);
        }
        if (struct.isSetRequest()) {
          optionals.set(1);
        }
        if (struct.isSetArgvs()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetApi()) {
          oprot.writeString(struct.api);
        }
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetArgvs()) {
          {
            oprot.writeI32(struct.argvs.size());
            for (Map.Entry<String, String> _iter23 : struct.argvs.entrySet())
            {
              oprot.writeString(_iter23.getKey());
              oprot.writeString(_iter23.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recommend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.api = iprot.readString();
          struct.setApiIsSet(true);
        }
        if (incoming.get(1)) {
          struct.request = new CommonRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map24 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.argvs = new HashMap<String,String>(2*_map24.size);
            for (int _i25 = 0; _i25 < _map24.size; ++_i25)
            {
              String _key26; // required
              String _val27; // required
              _key26 = iprot.readString();
              _val27 = iprot.readString();
              struct.argvs.put(_key26, _val27);
            }
          }
          struct.setArgvsIsSet(true);
        }
      }
    }

  }

  public static class recommend_result implements org.apache.thrift.TBase<recommend_result, recommend_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recommend_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new recommend_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new recommend_resultTupleSchemeFactory());
    }

    public CommonResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommonResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recommend_result.class, metaDataMap);
    }

    public recommend_result() {
    }

    public recommend_result(
      CommonResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public recommend_result(recommend_result other) {
      if (other.isSetSuccess()) {
        this.success = new CommonResponse(other.success);
      }
    }

    public recommend_result deepCopy() {
      return new recommend_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CommonResponse getSuccess() {
      return this.success;
    }

    public recommend_result setSuccess(CommonResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CommonResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof recommend_result)
        return this.equals((recommend_result)that);
      return false;
    }

    public boolean equals(recommend_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(recommend_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      recommend_result typedOther = (recommend_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("recommend_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class recommend_resultStandardSchemeFactory implements SchemeFactory {
      public recommend_resultStandardScheme getScheme() {
        return new recommend_resultStandardScheme();
      }
    }

    private static class recommend_resultStandardScheme extends StandardScheme<recommend_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, recommend_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CommonResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, recommend_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class recommend_resultTupleSchemeFactory implements SchemeFactory {
      public recommend_resultTupleScheme getScheme() {
        return new recommend_resultTupleScheme();
      }
    }

    private static class recommend_resultTupleScheme extends TupleScheme<recommend_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, recommend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, recommend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CommonResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
